{"version":3,"file":"js/app~71c0e426.588f61f6.js","mappings":"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","sources":["webpack://kalapps-pwa/./src/scripts/index.js","webpack://kalapps-pwa/./src/scripts/provider/favorite.provider.js","webpack://kalapps-pwa/./src/scripts/provider/restaurant.provider.js","webpack://kalapps-pwa/./src/scripts/routes/routes.js"],"sourcesContent":["import 'lazysizes';\nimport 'iconify-icon';\nimport 'regenerator-runtime';\nimport 'lazysizes/plugins/parent-fit/ls.parent-fit';\nimport '../styles/main.scss';\nimport 'notyf/notyf.min.css';\n\nimport App from './views/app';\nimport ServiceWorker from './utils/sw.register';\n\nconst app = new App({\n  button: document.querySelector('#nav-trigger'),\n  drawer: document.querySelector('#nav-drawer'),\n  content: document.querySelector('#content'),\n  skipLink: document.querySelector('#skip-link'),\n});\n\nwindow.addEventListener('hashchange', () => {\n  app.renderPage();\n});\n\nwindow.addEventListener('load', () => {\n  app.renderPage();\n\n  ServiceWorker.register();\n});\n","import { openDB as useIndexedDB } from 'idb';\nimport config from '../config/app.config';\n\nconst {\n  db: { objectStorageName },\n} = config;\n\nconst database = useIndexedDB(config.db.name, config.db.version, {\n  upgrade(db) {\n    db.createObjectStore(objectStorageName, { keyPath: 'id' });\n  },\n});\n\nconst FavoriteRestaurantProvider = {\n  async getRestaurant(id) {\n    if (!id) return undefined;\n\n    return (await database).get(objectStorageName, id);\n  },\n\n  async getAllRestaurants() {\n    return (await database).getAll(objectStorageName);\n  },\n\n  async searchRestaurants(query) {\n    const restaurants = await this.getAllRestaurants();\n\n    return restaurants.filter((restaurant) => {\n      const restaurantTitle = (restaurant.name || '-').toLowerCase();\n      const jammedRestaurantTitle = restaurantTitle.replace(/\\s/g, '');\n\n      const cleanQuery = query.toLowerCase().replace(/\\s/g, '');\n      return jammedRestaurantTitle.includes(cleanQuery);\n    });\n  },\n\n  async putRestaurant(restaurant) {\n    if (!restaurant.hasOwnProperty('id')) return undefined;\n\n    return (await database).put(objectStorageName, restaurant);\n  },\n\n  async deleteRestaurant(id) {\n    return (await database).delete(objectStorageName, id);\n  },\n};\n\nexport default FavoriteRestaurantProvider;\n","import api from '../config/api.config';\nimport ToastHelpers from '../utils/toast.helpers';\nimport ErrorMessage from '../utils/error.message';\n\nclass RestaurantProvider {\n  static async restaurants() {\n    try {\n      const response = await fetch(api.lists());\n      if (!response.ok) throw Error(ErrorMessage.ERR_REQUEST_FAILED);\n\n      const responseJson = await response.json();\n\n      return responseJson.restaurants;\n    } catch (err) {\n      ToastHelpers\n        .withError(err)\n        .error(ErrorMessage.ERR_GET_DATA('restaurants'));\n\n      return [];\n    }\n  }\n\n  static async searchRestaurant(keyword) {\n    try {\n      const response = await fetch(api.search(keyword));\n      if (!response.ok) throw Error(ErrorMessage.ERR_REQUEST_FAILED);\n\n      const responseJson = await response.json();\n\n      return responseJson.restaurants;\n    } catch (err) {\n      ToastHelpers\n        .withError(err)\n        .error(ErrorMessage.ERR_GET_DATA('restaurants'));\n\n      return [];\n    }\n  }\n\n  static async detailRestaurant(id) {\n    try {\n      const response = await fetch(api.detail(id));\n      if (!response.ok) throw Error(ErrorMessage.ERR_REQUEST_FAILED);\n\n      const responseJson = await response.json();\n\n      return responseJson.restaurant;\n    } catch (err) {\n      ToastHelpers\n        .withError(err)\n        .error(ErrorMessage.ERR_GET_DATA('restaurant detail'));\n\n      return {};\n    }\n  }\n\n  static async postReview({ id, name, review }) {\n    try {\n      const response = await fetch(api.review(), {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          id,\n          name,\n          review,\n        }),\n      });\n      if (!response.ok) throw Error(ErrorMessage.ERR_REQUEST_FAILED);\n\n      const responseJson = await response.json();\n\n      ToastHelpers.success('Thank you. Your review has been successfully recorded.');\n\n      return responseJson.customerReviews;\n    } catch (err) {\n      ToastHelpers\n        .withError(err)\n        .error(ErrorMessage.ERR_POST_DATA('review'));\n\n      return [];\n    }\n  }\n}\n\nexport default RestaurantProvider;\n","import Restaurants from '../views/pages/restaurants.view';\nimport Detail from '../views/pages/detail.view';\nimport Favorite from '../views/pages/favorite.view';\n\nconst routes = {\n  '/': Restaurants, // default page\n  '/favorite': Favorite,\n  '/detail/:id': Detail,\n};\n\nexport default routes;\n"],"names":["app","App","button","document","querySelector","drawer","content","skipLink","window","addEventListener","renderPage","ServiceWorker","i","objectStorageName","config","database","useIndexedDB","upgrade","db","createObjectStore","keyPath","getRestaurant","id","undefined","get","getAllRestaurants","getAll","searchRestaurants","query","restaurants","filter","restaurant","jammedRestaurantTitle","name","toLowerCase","replace","cleanQuery","includes","putRestaurant","hasOwnProperty","put","deleteRestaurant","delete","RestaurantProvider","fetch","api","response","ok","Error","ErrorMessage","json","responseJson","ToastHelpers","error","keyword","review","method","headers","body","JSON","stringify","customerReviews","Restaurants","Favorite","Detail"],"sourceRoot":""}